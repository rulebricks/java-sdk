/**
 * This file was auto-generated by Fern from our API Definition.
 */

package types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = TestTestStateConditionsItemValue.Builder.class
)
public final class TestTestStateConditionsItemValue {
  private final Optional<Boolean> result;

  private final Optional<String> err;

  private final Map<String, Object> additionalProperties;

  private TestTestStateConditionsItemValue(Optional<Boolean> result, Optional<String> err,
      Map<String, Object> additionalProperties) {
    this.result = result;
    this.err = err;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("result")
  public Optional<Boolean> getResult() {
    return result;
  }

  @JsonProperty("err")
  public Optional<String> getErr() {
    return err;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof TestTestStateConditionsItemValue && equalTo((TestTestStateConditionsItemValue) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(TestTestStateConditionsItemValue other) {
    return result.equals(other.result) && err.equals(other.err);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.result, this.err);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<Boolean> result = Optional.empty();

    private Optional<String> err = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(TestTestStateConditionsItemValue other) {
      result(other.getResult());
      err(other.getErr());
      return this;
    }

    @JsonSetter(
        value = "result",
        nulls = Nulls.SKIP
    )
    public Builder result(Optional<Boolean> result) {
      this.result = result;
      return this;
    }

    public Builder result(Boolean result) {
      this.result = Optional.ofNullable(result);
      return this;
    }

    @JsonSetter(
        value = "err",
        nulls = Nulls.SKIP
    )
    public Builder err(Optional<String> err) {
      this.err = err;
      return this;
    }

    public Builder err(String err) {
      this.err = Optional.ofNullable(err);
      return this;
    }

    public TestTestStateConditionsItemValue build() {
      return new TestTestStateConditionsItemValue(result, err, additionalProperties);
    }
  }
}
