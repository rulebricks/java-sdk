/**
 * This file was auto-generated by Fern from our API Definition.
 */

package types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = UserInviteResponseUser.Builder.class
)
public final class UserInviteResponseUser {
  private final Optional<String> email;

  private final Optional<String> role;

  private final Optional<List<String>> accessGroups;

  private final Map<String, Object> additionalProperties;

  private UserInviteResponseUser(Optional<String> email, Optional<String> role,
      Optional<List<String>> accessGroups, Map<String, Object> additionalProperties) {
    this.email = email;
    this.role = role;
    this.accessGroups = accessGroups;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return Email of the invited user.
   */
  @JsonProperty("email")
  public Optional<String> getEmail() {
    return email;
  }

  /**
   * @return Role assigned to the user.
   */
  @JsonProperty("role")
  public Optional<String> getRole() {
    return role;
  }

  /**
   * @return Access groups assigned to the user.
   */
  @JsonProperty("accessGroups")
  public Optional<List<String>> getAccessGroups() {
    return accessGroups;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof UserInviteResponseUser && equalTo((UserInviteResponseUser) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(UserInviteResponseUser other) {
    return email.equals(other.email) && role.equals(other.role) && accessGroups.equals(other.accessGroups);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.email, this.role, this.accessGroups);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<String> email = Optional.empty();

    private Optional<String> role = Optional.empty();

    private Optional<List<String>> accessGroups = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(UserInviteResponseUser other) {
      email(other.getEmail());
      role(other.getRole());
      accessGroups(other.getAccessGroups());
      return this;
    }

    @JsonSetter(
        value = "email",
        nulls = Nulls.SKIP
    )
    public Builder email(Optional<String> email) {
      this.email = email;
      return this;
    }

    public Builder email(String email) {
      this.email = Optional.ofNullable(email);
      return this;
    }

    @JsonSetter(
        value = "role",
        nulls = Nulls.SKIP
    )
    public Builder role(Optional<String> role) {
      this.role = role;
      return this;
    }

    public Builder role(String role) {
      this.role = Optional.ofNullable(role);
      return this;
    }

    @JsonSetter(
        value = "accessGroups",
        nulls = Nulls.SKIP
    )
    public Builder accessGroups(Optional<List<String>> accessGroups) {
      this.accessGroups = accessGroups;
      return this;
    }

    public Builder accessGroups(List<String> accessGroups) {
      this.accessGroups = Optional.ofNullable(accessGroups);
      return this;
    }

    public UserInviteResponseUser build() {
      return new UserInviteResponseUser(email, role, accessGroups, additionalProperties);
    }
  }
}
