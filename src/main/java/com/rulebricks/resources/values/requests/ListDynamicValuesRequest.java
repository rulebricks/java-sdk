/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.values.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = ListDynamicValuesRequest.Builder.class
)
public final class ListDynamicValuesRequest {
  private final Optional<String> name;

  private final Map<String, Object> additionalProperties;

  private ListDynamicValuesRequest(Optional<String> name,
      Map<String, Object> additionalProperties) {
    this.name = name;
    this.additionalProperties = additionalProperties;
  }

  /**
   * @return Name of a specific dynamic value to retrieve data for
   */
  @JsonProperty("name")
  public Optional<String> getName() {
    return name;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof ListDynamicValuesRequest && equalTo((ListDynamicValuesRequest) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(ListDynamicValuesRequest other) {
    return name.equals(other.name);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.name);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<String> name = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(ListDynamicValuesRequest other) {
      name(other.getName());
      return this;
    }

    @JsonSetter(
        value = "name",
        nulls = Nulls.SKIP
    )
    public Builder name(Optional<String> name) {
      this.name = name;
      return this;
    }

    public Builder name(String name) {
      this.name = Optional.ofNullable(name);
      return this;
    }

    public ListDynamicValuesRequest build() {
      return new ListDynamicValuesRequest(name, additionalProperties);
    }
  }
}
